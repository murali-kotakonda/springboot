OAuth:
---------
-> Oauth is authorization , not authentication
-> It is intended for authorization between the services.
-> one service  tries to access another service on behalf of user
-> ouath is perfect for authorization between the services.


steps:
-----------
1.App1 asks github for the access
2.github wil ask the user for providing the access
3.user will agree or deny
if user agrees then a token is generated by github.
github gives the token to app1.
the token contains limited access to resources , with expiry

4.next tim app1 wil get the user details using the oauth token

Oauth acces token contains user-allowed permissions  


Terms:
------------
resource      : what needs to be accessed , [protected resource]
Resouce Owner : Person who has access to the resource.
                An entity capable of granting access to the protected Resource.
                 
Resouce Server  :The server hosting the protected Resource. manages and holds the resouce

Client    : application that need access to the protected resouce on bealf of resouce owner


Authorization server : 
-Resource Server has coupled with Authorization server.
- is responsible for making sure who ever is accessing the resource server is authorized.
- implements oauth

some times Resouce Server and Authorization server can be same or differnet

Authorization server issues authorization tokens to the client




Oauth Flows :
---------------------
- Authorization code flow
- implicit flow
- client credential flows (only for trusted clients)  [same as implicit only] refer oauth client microservcies flow.jpeg


Authorization code flow
-----------------------------------------

client gets two tokens
-authorization token
-access token

1.User asks client to get access for the resource.
2.client contacts the authorization server.
3.authorization server asks the user for grant permissions
4.user grants the persmission
5.autho server generates the autho token and shares to the client.
6.client shares the auth tokn to authorization server for fetching the access token
7. authorization server generate the access token and shares to the client
8.client now uses the access token and passes to the resources server for fetching the resouce.





implicit flow:
----------------------------
- used for short lives access tokens
- not so secured approach


client gets one tokens
access token

1.User asks client to get access for the resource.
2.client contacts the authorization server.
3.authorization server asks the user for grant permissions
4.user grants the persmission
5. authorization server generated the access token and shares to the client
6.client now uses the access token and passes to the resources server for fetching the resouce.

                       

